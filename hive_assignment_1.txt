##author: Kunal Nayyar ##
## Hive Assignment 1 ##
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Download vehicle sales data -> https://github.com/shashank-mishra219/Hive-Class/blob/main/sales_order_data.csv
2. Store raw data into hdfs location
>hadoop fs -mkdir /tmp/hive/rawdata
>hadoop fs -copyFromLocal sales_order_data.csv /tmp/hive/rawdata/

3. Create an internal hive table "sales_order_csv" which will store csv data sales_order_csv ... make sure to skip header row while creating table
>create table sales_order_csv(ORDERNUMBER int,QUANTITYORDERED int,PRICEEACH float,ORDERLINENUMBER int,SALES float,STATUS string,QTR_ID int,MONTH_ID int,YEAR_ID int,PRODUCTLINE string,MSRP int,PRODUCTCODE string,PHONE string,CITY string,STATE string,POSTALCODE string,COUNTRY string,TERRITORY string,CONTACTLASTNAME string,
CONTACTFIRSTNAME string,DEALSIZE string) row format delimited fields terminated by ',' tblproperties('skip.header.line.count' = '1');

4. Load data from hdfs path into "sales_order_csv" 
>load data inpath '/tmp/hive/rawdata/' to table sales_order_csv;

5. Create an internal hive table which will store data in ORC format "sales_order_orc"
> create table sales_order_orc(ORDERNUMBER int,QUANTITYORDERED int,PRICEEACH float,ORDERLINENUMBER int,SALES float,STATUS string,QTR_ID int,MONTH_ID int,YEAR_ID int,PRODUCTLINE string,MSRP int,PRODUCTCODE string,PHONE string,CITY string,STATE string,POSTALCODE string,COUNTRY string,TERRITORY string,CONTACTLASTNAME string,CONTACTFIRSTNAME string,DEALSIZE string) stored as orc;

6. Load data from "sales_order_csv" into "sales_order_orc"
>from sales_order_csv insert overwrite table sales_order_orc select *;

7.Perform below mentioned queries on "sales_order_orc" table:
a. Calculate total sales per year
>select sum(sales), year_id from sales_order_orc group by year_id;
3516979.547241211	2003
4724162.593383789	2004
1791486.7086791992	2005

b. Find a product for which maximum orders were placed
>select count(productcode) as totalorders,productcode from sales_order_orc group by productcode order by totalorders desc limit 1;
totalorders	productcode
52	S18_3232

c. Calculate the total sales for each quarter
>select sum(sales) as totalsales,qtr_id as quarter from sales_order_orc group by qtr_id order by qtr_id;
totalsales	quarter
2350817.726501465	1
2048120.3029174805	2
1758910.808959961	3
3874780.010925293	4

d. In which quarter sales was minimum
> select sum(sales) as totalsales,qtr_id as quarter from sales_order_orc group by qtr_id order by totalsales limit 1;
totalsales	quarter
1758910.808959961	3

e. In which country sales was maximum and in which country sales was minimum
>select sum(sales) as totalsales,country from sales_order_orc group by country order by totalsales limit 1;
totalsales	country
57756.43029785156	Ireland
>select sum(sales) as totalsales,country from sales_order_orc group by country order by totalsales desc limit 1;
totalsales	country
3627982.825744629	USA

f. Calculate quarterly sales for each city
> select sum(sales) as quaterlysales,city,qtr_id as quarter from sales_order_orc group by city,qtr_id order by city,qtr_id limit 20;
quaterlysales	city	quarter
100595.5498046875	Aaarhus	4
6166.7998046875	Allentown	2
71930.61041259766	Allentown	3
44040.729736328125	Allentown	4
4219.2001953125	Barcelona	2
74192.66003417969	Barcelona	4
56181.320068359375	Bergamo	1
81774.40008544922	Bergamo	4
16363.099975585938	Bergen	3
95277.17993164062	Bergen	4
31606.72021484375	Boras	1
53941.68981933594	Boras	3
48710.92053222656	Boras	4
74994.240234375	Boston	2
15344.640014648438	Boston	3
63730.7802734375	Boston	4
31474.7802734375	Brickhaven	1
7277.35009765625	Brickhaven	2
114974.53967285156	Brickhaven	3
11528.52978515625	Brickhaven	4

h. Find a month for each year in which maximum number of quantities were sold
>create table t2 as with q1 as (select sum(quantityordered) as monthlyquantity,year_id,month_id from sales_order_orc group by year_id,month_id order by year_id,month_id) select monthlyquantity,month_id,year_id from q1 where q1.monthlyquantity in (select max(monthlyquantity) from q1 group by year_id);
Total MapReduce CPU Time Spent: 7 seconds 610 msec
>select * from t2; 
t2.monthlyquantity	t2.month_id	t2.year_id
10179	11	2003
10678	11	2004
4357	5	2005

[or Faster way]
>create table t1 as with q1 as (select sum(quantityordered) as monthlyquantity,year_id,month_id from sales_order_orc group by year_id,month_id order by year_id,month_id) select * from q1;
>select monthlyquantity,month_id,year_id from t1 where t1.monthlyquantity in (select max(monthlyquantity) from t1 group by year_id);
Total MapReduce CPU Time Spent: 2 seconds 640 msec
monthlyquantity	month_id	year_id
10179	11	2003
10678	11	2004
4357	5	2005

[or using partition on year]
>create table yearpart (monthlyquantity bigint,month_id int)partitioned by (year_id int) stored as orc; 
>insert overwrite table yearpart partition(year_id) select sum(quantityordered) as monthlyquantity,month_id,year_id from sales_order_orc group by year_id,month_id order by year_id,month_id;
>select monthlyquantity,month_id,year_id from yearpart where yearpart.monthlyquantity in (select max(monthlyquantity) from yearpart group by year_id);
Total MapReduce CPU Time Spent: 2 seconds 640 msec
monthlyquantity	month_id	year_id
10179	11	2003
10678	11	2004
4357	5	2005

------------------------------------------------------------------------------------------------------------------------------------------------
Scenario Based questions:

Q. Will the reducer work or not if you use “Limit 1” in any HiveQL query?

Yes as long as we are using group by or other aggregation functions in the query reducer will still work.

Q. Suppose I have installed Apache Hive on top of my Hadoop cluster using default metastore configuration. Then, what will happen if we have multiple clients trying to access Hive at the same time? 

Multiple clients accessing Hive at the same time will get an error as the default configuration only allows one connection but in cloudera v5.13 third party metastore is mySql which is set as standalone metastore allowing for multiple connections. Below is the hive-site.xml found in /etc/hive/conf/ directory. 
"""
>cat hive-site.xml
<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>

  <!-- Hive Configuration can either be stored in this file or in the hadoop configuration files  -->
  <!-- that are implied by Hadoop setup variables.                                                -->
  <!-- Aside from Hadoop setup variables - this file is provided as a convenience so that Hive    -->
  <!-- users do not have to edit hadoop configuration files (that may be managed as a centralized -->
  <!-- resource).                                                                                 -->

  <!-- Hive Execution Parameters -->

  <property>
    <name>javax.jdo.option.ConnectionURL</name>
    <value>jdbc:mysql://127.0.0.1/metastore?createDatabaseIfNotExist=true</value>
    <description>JDBC connect string for a JDBC metastore</description>
  </property>

  <property>
    <name>javax.jdo.option.ConnectionDriverName</name>
    <value>com.mysql.jdbc.Driver</value>
    <description>Driver class name for a JDBC metastore</description>
  </property>

  <property>
    <name>javax.jdo.option.ConnectionUserName</name>
    <value>hive</value>
  </property>

  <property>
    <name>javax.jdo.option.ConnectionPassword</name>
    <value>cloudera</value>
  </property>

  <property>
    <name>hive.hwi.war.file</name>
    <value>/usr/lib/hive/lib/hive-hwi-0.8.1-cdh4.0.0.jar</value>
    <description>This is the WAR file with the jsp content for Hive Web Interface</description>
  </property>

  <property>
    <name>datanucleus.fixedDatastore</name>
    <value>true</value>
  </property>

  <property>
    <name>datanucleus.autoCreateSchema</name>
    <value>false</value>
  </property>

  <property>
    <name>hive.metastore.uris</name>
    <value>thrift://127.0.0.1:9083</value>
    <description>IP address (or fully-qualified domain name) and port of the metastore host</description>
  </property>
</configuration>
"""

Q.Suppose, I create a table that contains details of all the transactions done by the customers: CREATE TABLE transaction_details (cust_id INT, amount FLOAT, month STRING, country STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ;
Now, after inserting 50,000 records in this table, I want to know the total revenue generated for each month. But, Hive is taking too much time in processing this query. How will you solve this problem and list the steps that I will be taking in order to do so?

Partitioning the table on month field will reduce the time it takes for the query to search whole record.

>create table transactions_monthly(cust_id INT,amount FLOAT,country STRING) partitioned by (month STRING) row format delimited fields terminated by ',';
>set hive.exec.dynamic.partition =true;
>set hive.exec.dynamic.partition.mode = nonstrict;
>insert overwrite table transactions_monthly partition(month) select cust_id,amount,country,month from transaction_details;
>select sum(amount),month from transactions_monthly group by month;   

Q.How can you add a new partition for the month December in the above partitioned table?
> alter table transactions_monthly add partition(month='december');

Q.I am inserting data into a table based on partitions dynamically. But, I received an error – FAILED ERROR IN SEMANTIC ANALYSIS: Dynamic partition strict mode requires at least one static partition column. How will you remove this error?
No static partition was explicitly mentioned as we are doing dynamic partitioning so it has to be enabled first.
>set hive.exec.dynamic.partition =true;
>set hive.exec.dynamic.partition.mode = nonstrict;


Q.Suppose, I have a CSV file – ‘sample.csv’ present in ‘/temp’ directory with the following entries:
id first_name last_name email gender ip_address
How will you consume this CSV file into the Hive warehouse using built-in SerDe
1,"chris","hemsworth","chrishem@gmail.com","male","192.168.0.2"

>create table emp(id int,first_name string,last_name string,email string,gender string,ip_address string) row format serde 'org.apache.hadoop.hive.serde2.OpenCSVSerde' stored as textfile tblproperties("skip.header.line.count"="1");
>load data local inpath '/temp/' into table emp;

Q.Suppose, I have a lot of small CSV files present in the input directory in HDFS and I want to create a single Hive table corresponding to these files. The data in these files are in the format: {id, name, e-mail, country}. Now, as we know, Hadoop performance degrades when we use lots of small files.
So, how will you solve this problem where we want to create a single Hive table for lots of small files without degrading the performance of the system?



Q.LOAD DATA LOCAL INPATH ‘Home/country/state/’
OVERWRITE INTO TABLE address;
The following statement failed to execute. What can be the cause?

Is it possible to add 100 nodes when we already have 100 nodes in Hive? If yes, how?

------------------------------------------------------------------------------------------------------------------------------------------------
Hive Practical questions:

Hive Join operations

Create a  table named CUSTOMERS(ID | NAME | AGE | ADDRESS   | SALARY)
#id,name,address,salary
#1,dave,123street,3000
#2,ellen,45avenue,2000
#3,kevin,62roadstreet,2222
#4,maggie,82lane,5000

> create table CUSTOMERS(ID INT,NAME STRING,ADDRESS STRING,SALARY BIGINT) row format delimited fields terminated by ',' stored as textfile tblproperties("skip.header.line.count" = "1");
>load data local inpath '/home/cloudera/bigdata/first.txt' into table CUSTOMERS;

Create a Second  table ORDER(OID | DATE | CUSTOMER_ID | AMOUNT
)
#oid,date,customer_id,amount
#23,23-03-2021,3,210
#12,18-04-2022,5,67
#4,03-12-2021,2,89
#5,03-12-2021,2,22
#45,09-09-2020,6,333
#63,21-10-2021,4,1627

> create table ORDERS(OID INT,DATE STRING,CUSTOMER_ID INT,AMOUNT BIGINT) row format delimited fields terminated by ',' stored as textfile tblproperties("skip.header.line.count" = "1");
>load data local inpath '/home/cloudera/bigdata/second.txt' into table ORDERS;

Now perform different joins operations on top of these tables
(Inner JOIN, LEFT OUTER JOIN ,RIGHT OUTER JOIN ,FULL OUTER JOIN)

#INNER JOIN
>select c.id,c.name,o.oid,o.date,o.amount from customers as c join orders as o on c.id = o.customer_id;
c.id    c.name  o.oid   o.date  o.amount
3       kevin   23      23-03-2021      210
2       ellen   4       03-12-2021      89
2       ellen   5       03-12-2021      22
4       maggie  63      21-10-2021      1627

#LEFT OUTER JOIN
>select c.id,c.name,o.oid,o.date,o.amount from customers as c left join orders as o on c.id = o.customer_id;
c.id    c.name  o.oid   o.date  o.amount
1       dave    NULL    NULL    NULL
2       ellen   4       03-12-2021      89
2       ellen   5       03-12-2021      22
3       kevin   23      23-03-2021      210
4       maggie  63      21-10-2021      1627



#RIGHT OUTER JOIN
>select c.id,c.name,o.oid,o.date,o.amount from customers as c right join orders as o on c.id = o.customer_id;
c.id    c.name  o.oid   o.date  o.amount
3       kevin   23      23-03-2021      210
NULL    NULL    12      18-04-2022      67
2       ellen   4       03-12-2021      89
2       ellen   5       03-12-2021      22
NULL    NULL    45      09-09-2020      333
4       maggie  63      21-10-2021      1627

#FULL OUTER JOIN
>select c.id,c.name,o.oid,o.date,o.amount from customers as c left join orders as o on c.id = o.customer_id;

c.id    c.name  o.oid   o.date  o.amount
1       dave    NULL    NULL    NULL
2       ellen   5       03-12-2021      22
2       ellen   4       03-12-2021      89
3       kevin   23      23-03-2021      210
4       maggie  63      21-10-2021      1627
NULL    NULL    12      18-04-2022      67
NULL    NULL    45      09-09-2020      333
------------------------------------------------------------------------------------------------------------------------------------------------

BUILD A DATA PIPELINE WITH HIVE

Download a data from the given location - 
https://archive.ics.uci.edu/ml/machine-learning-databases/00360/

1. Create a hive table as per given schema in your dataset 

>create table airquality(DATE string,TIME string,CO string,TINOXIDE_CO int,NMHC int,C6H6 string,TITANIA_NMHC int,NOX int,TUNGOXIDE_NOX int,NO2 int,TUNGOXIDE_NO2 int,INDIUM_O3 int,TEMPERATURE string,RELATIVE_HUMIDITY string,ABSOLUTE_HUMIDITY string) row format delimited fields terminated by '\u0059' stored as textfile tblproperties("skip.header.line.count"="1");

2. try to place a data into table location

>hadoop fs -copyFromLocal '/home/cloudera/Downloads/AirQualityUCI.csv' hdfs://quickstart.cloudera:8020/user/hive/warehouse/hiveassignment.db/airquality
>hadoop fs -ls hdfs://quickstart.cloudera:8020/user/hive/warehouse/hiveassignment.db/airquality                                         Found 1 items
-rw-r--r--   1 cloudera supergroup     785065 2022-09-22 13:30 hdfs://quickstart.cloudera:8020/user/hive/warehouse/hiveassignment.db/airquality/AirQualityUCI.csv

>create view airquality3 as select cast(to_date(from_unixtime(unix_timestamp(DATE ,'dd/MM/yyyy'), 'yyyy-MM-dd')) as date) as DATE,from_unixtime(unix_timestamp(TIME,'HH.MM.SS'), 'HH:MM:SS') as TIME,cast(regexp_replace(CO, ',', '.') as decimal(5,2)) as CO,TINOXIDE_CO,NMHC,cast(regexp_replace(C6H6, ',', '.') as decimal(5,2)) as C6H6,TITANIA_NMHC,NOX,TUNGOXIDE_NOX,NO2,TUNGOXIDE_NO2,INDIUM_O3,cast(regexp_replace(TEMPERATURE, ',', '.') as decimal(5,2)) as TEMPERATURE,cast(regexp_replace(RELATIVE_HUMIDITY, ',', '.') as decimal(5,2)) as RELATIVE_HUMIDITY,cast(regexp_replace(ABSOLUTE_HUMIDITY, ',', '.') as decimal(7,5)) as ABSOLUTE_HUMIDITY from airquality;

3. Perform a select operation 

>select * from airquality3 limit 4;
airquality3.date        airquality3.time        airquality3.co  airquality3.tinoxide_co   airquality3.nmhc        airquality3.c6h6        airquality3.titania_nmhc airquality3.nox  airquality3.tungoxide_nox       airquality3.no2 airquality3.tungoxide_no2 airquality3.indium_o3   airquality3.temperature airquality3.relative_humidity     airquality3.absolute_humidity
2004-03-10      18:12:00        2.6     1360    150     11.9    1046    166     1056      113     1692    1268    13.6    48.9    0.7578
2004-03-10      19:12:00        2       1292    112     9.4     955     103     1174      92      1559    972     13.3    47.7    0.7255
2004-03-10      20:12:00        2.2     1402    88      9       939     131     1140      114     1555    1074    11.9    54      0.7502
2004-03-10      21:12:00        2.2     1376    80      9.2     948     172     1092      122     1584    1203    11      60      0.7867

4. Fetch the result of the select operation in your local as a csv file .


 
5. Perform group by operation . 
7. Perform filter operation at least 5 kinds of filter examples . 
8. show and example of regex operation
9. alter table operation 
10 . drop table operation
12 . order by operation . 
13 . where clause operations you have to perform . 
14 . sorting operation you have to perform . 
15 . distinct operation you have to perform . 
16 . like an operation you have to perform . 
17 . union operation you have to perform . 
18 . table view operation you have to perform . 
